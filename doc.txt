Users Spring Security y JWT

Que es un JSON Web Tokens?
- es para implementar seguridad en la aplicaciones API REST basado en RFC 7519, que este basadas en javaScript, las cuales son:
 -- son escaladles
 -- codificado y descodificado en Base64
 -- contiene reclamaciones o claims
 -- firmado mediante una llave secreta
 -- compacto
 -- autonomo
 -- seguridad

--------------- crear proyectos -----------------------
-dependencias
    -- spring web
    -- spring data jpa
    -- spring boot devTools
    -- mySql driver
    -- validation I/O
    -- spring Security

--------------- logica de proyecto ---------------------
- se crean la tabla en mysql products.
- se crear el modelo product con los mismo campos de la base de datos.
- en ProductRepository se realiza la asociacion para que puendan acceder al modelo desde los controladores.
- en ProductService crear metodo crud para estar listo para usarse.
- se crear una implemnetacion ProductServiceImpl para poder usar los metodos y manipularlos es la logica del negocio.
- en controlador se crear ProductController para manipualr las rutas.
- se ejecuta pararevisarlo por los metodo de CRUD de postman.
- en postman selecionar POST en body->raw->JSON colocamos el texto.
    -- realizando esta accion tendra datos guardados pero por el navegador para ir consultando y tener datos para CRUD
    "name": "Producto limpieza",
    "price": 5000,
    "description": "alguna description para el producto de limpieza!"
- realizar validaciones y restricciones del contenido de cada campos en el modal Product.
- para ver los mensajes de error de las condiciones del modal en las funciones del controlador se ingresar los BindingResult y agregar dentro de la funcion donde se ejecutara el mensaje de error.
- en messages.properties es donde se coloca el texto que aparecera con cada regla de negocio que se indico en Product, se crea un archivo en la raiz AppCongi por que es una hoja de configuracion.
- dentro de las condiciones se colocar messages y solo el nombre para indicar que tome el valor de properties -    @NotEmpty(message = "{NotEmpty.product.name}")
- en la class de ProductValidation es donde se definiran las reglas de negocio de los campos Product
- se realiza la asociacion de ProductValidation en e controlador
- la validacion por mdeio de una funcion se realizan en la carptea de validation -> IsRequired : es la interfas de como validar y en RequiredValidation : es la funcion de que se validara (si es null, si es vacio o ambas con isBlack)
- la validacion del contenido de los campos se realiza por medio de la carpeta de validation usando la clase y la interfas para realacionar entre que validar y el tipo de valor, indicando el nombre del metodo en el modelo de la tabla

- se crear las clase en los entities (modeles) donde tendra la informacion de la base de datos, despues los repositorios donde se asociara las llaves de las entites, despues los servicios donde se realiza la funciones que tendra cada accion del CRUD, depues en services usar el implemnte para poder usar darles acciones a los metodos de las funciones indicadas en servicios
- en SpringSecurityConfig es donde inidcamos la funcion de encriptacion, tambien se inidca que mostra de la autentificacion
- en UserController se realiza los paso de validacion y mensaje en cado del campo ser obligatorio
- se usa ExistsByUsernameValidation para poder controlar el metodo de la validacion
- en JpaUserDetailService buscar el usaerna me cuando el usuario se alla logeado y asi saber cuando esta logeado

- documentacion de JSONWebToken https://jwt.io/libraries?language=Java, es donde viaje al autentificacion del usuario por medio de un encriptado donde tiene los datos del username, y la llave que tiene el servidor donde no se mueve al fontend

- para trabajar con JWT en la pagina https://github.com/jwtk/jjwt , se copia el codigo de MAVEL (el que dejo en el pie), se pega en el POM al final pero dentro de la dependencias, se peude mostrar el resultado del token generado por la aplicacion

            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-api</artifactId>
                <version>0.12.5</version>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-impl</artifactId>
                <version>0.12.5</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-jackson</artifactId> <!-- or jjwt-gson if Gson is preferred -->
                <version>0.12.5</version>
                <scope>runtime</scope>
            </dependency>

- en TokenJwtConfig es donde tendras la variables donde se indica que tipo de encriptacion se usara para el JWT y las variables que se le pasar ela cliente en los proceso que estan en JwtAuthenticationFilter

- en JwtValidationFilter es donde ser realizara la validacion del token con los datos de autentificacion ingresados
- se realiza una configuracion para poder tomar todos los metodos de scrum de envio y recepcion de peticiones desde la url


--------------- orden de creaci√≥n de documentos --------
- se crean los package
    -- controllers
    -- entities
    -- repositories
    -- services
- se crea la class en entities - Product
- se crea la class en repositories - ProductRepository
- se crea una interface la class en services - ProductService
- se crear la class en services - ProductServiceImpl
- se crear el controlador - ProductController
- en resource se crea un archivo messages.properties
- en la raiz se crea un archivo AppConfig
- se crear un archivo en la raiz con el nombre de ProductValidation
- se crea el package en la raiz validation
- se crea la class en validation IsRequired
- se crea la class en validation RequiredValidation
- se crea la clase en validacion IsExistsDb
- se crea la clase en validacion IsExistsDbValidation
- se crea la clase en entities User
- se crea la clase en entities Role
- se crea la clase en repository UserRepository
- se crea la clase en repository RoleRepository
- se crea la class en service UserService
- se crea la clase en service UserServiceImpl
- se crea en las raiz el package Security
- se crea la clase en Security SpringSecurityConfig
- se crea la clase en controller UserController
- se crea la clase en validacion ExistsByUsername
- se crea la clase en validacion ExistsByUsernameValidation
- se crea la clase en service JpaUserDetailService
- se crea el package en Security securityFilter
- se crea la clase en securityFilter JwtAuthenticationFilter
- se crea la clase en securityFilter TokenJwtConfig
- se crea la clase en securityFilter JwtValidationFilter
- se crea la abstracta clase en Security SimpleGrantedAuthorityJsonCreator